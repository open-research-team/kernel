package component

import (
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/x-research-team/bus"
	"github.com/x-research-team/contract"
)

// COMPONENT Компонент
type COMPONENT struct {
	Bus chan []byte

	components map[string]contract.IComponent

	uuid string
}

// New Создать экземпляр компонента
func New(opts ...contract.ComponentModule) contract.KernelModule {
	a := &COMPONENT{Bus: make(chan []byte), components: make(map[string]contract.IComponent)}
	for _, o := range opts {
		o(a)
	}
	bus.Info <- "COMPONENT initialized"
	return func(c contract.IComponent) {
		c.AddComponent(a)
		bus.Info <- "COMPONENT attached to Billing Service"
	}
}

// run Запуск компонетов компонета
func (c *COMPONENT) run(a contract.IComponent) {
	if err := a.Configure(); err != nil {
		bus.Error <- err
	}
	if err := a.Run(); err != nil {
		bus.Error <- err
	}
	for true {
	}
}

// handle Обработка данных конкретным компонентом компонета
func (c *COMPONENT) handle(a contract.IComponent, data contract.IMessage) {
	if err := a.Write(data); err != nil {
		bus.Error <- err
	}
}

// AddPlugin Добавить плагин на горячем ходу
func (c *COMPONENT) AddPlugin(path, name string) error {
	return nil
}

// RemovePlugin Удалить компонент на горячем ходу
func (c *COMPONENT) RemovePlugin(name string) error {

}

func (c *COMPONENT) AddComponent(a contract.IComponent) {
	c.components[a.Name()] = a
}

// Configure Конфигурация компонета
func (c *COMPONENT) Configure() error {
	bus.Info <- "COMPONENT is configured"
	c.uuid = uuid.New().String()
	return nil
}

// Run Запуск компонента
func (c *COMPONENT) Run() error {
	bus.Info <- "COMPONENT component started"
	for true {
		data := <-c.Bus
		bus.Info <- fmt.Sprintf("COMPONENT -> BUS: %s", data)
	}
	return nil
}

func (c *COMPONENT) Route() string { return "route.COMPONENT" }

func (c *COMPONENT) Write(message contract.IMessage) error {
	m
	return nil
}

func (c *COMPONENT) Read() string {
	return ""
}

func (c *COMPONENT) Name() string {
	return "COMPONENT"
}

func (c *COMPONENT) Pid() string {
	return c.uuid
}

func (c *COMPONENT) Up(graceful bool) error {
	return nil
}

func (c *COMPONENT) Down(graceful bool) error {
	return nil
}

func (c *COMPONENT) Sleep(time.Duration) error {
	return nil
}

func (c *COMPONENT) Restart(graceful bool) error {
	return nil
}

func (c *COMPONENT) Pause() error {
	return nil
}

func (c *COMPONENT) Cron(rule string) error {
	return nil
}

func (c *COMPONENT) Stop() error {
	return nil
}

func (c *COMPONENT) Kill() error {
	return nil
}

func (c *COMPONENT) Sync(with string) error {
	return nil
}

func (c *COMPONENT) Backup(to string) error {
	return nil
}
